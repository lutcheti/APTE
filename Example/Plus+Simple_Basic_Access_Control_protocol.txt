# Unlinkability
#
fun mac/2.

free cp1.
free cp2.
free cr1.
free cr2.

free Error_6300.
free Error_6A80.
free get_challenge.

# Description of the reader role

let reader k_e k_m c =
  out(c,get_challenge);
  in(c,n_t);
  new n_r; new k_r;
  let m = senc((n_r,n_t,k_r),k_e) in
  out(c,(m,mac(m,k_m)));
  in(c,y).

# Description of the passport role 

let passport k_e k_m error_mac c =
  in(c,x);
  if x = get_challenge
  then
    new n_t;
    out(c,n_t);
    in(c,y);
    let (m_e,m_m) = y in

    (if m_m = mac(m_e,k_m)
    then
      let (n_r,n_t_2,k_r) = sdec(m_e,k_e) in			
      if n_t_2 = n_t
      then 
	new k_t; 
	let m = senc((n_t,n_r,k_t),k_e) in
	out(c,(m,mac(m,k_m)))
      else out(c,Error_6300)
    else out(c,error_mac)).

# Unlinkability

let oneS ke km ke2 km2 error_mac cp cr =
# Un passeport P(ke,km)
    (passport ke km error_mac cp
# qui parle soit à "son" reader R(ke,km) soit à un reader qui le "jettera" R(ke2,km2)
  | ((reader ke km cr) + (reader ke2 km2 cr))).

let system1 error_mac =
  new ke; new km;
  new ke2; new km2;
  new ke3; new km3;
  (   (oneS ke km ke3 km3 error_mac cp1 cr1)
    | (oneS ke km ke3 km3 error_mac cp2 cr2)
  ).

let system2 error_mac =
  new ke; new km;
  new ke2; new km2;
  new ke3; new km3;
  (
      (oneS ke km ke3 km3 error_mac cp1 cr1)
    | (oneS ke2 km2 ke3 km3 error_mac cp2 cr2)
  ).

equivalence system1 Error_6300 and system2 Error_6300.
equivalence system1 Error_6A80 and system2 Error_6A80.
